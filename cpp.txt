BFS
#include <iostream>
#include <queue>

using namespace std;

const int MAXN = 100;  // Maximum number of vertices

int graph[MAXN][MAXN];  // Adjacency matrix
bool visited[MAXN];     // Visited array

void bfs(int startVertex, int numVertices) {
    queue<int> q;
    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        cout << currentVertex << " ";

        for (int i = 0; i < numVertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int numVertices, numEdges, startVertex;
    cin >> numVertices >> numEdges >> startVertex;

    // Initialize adjacency matrix
    for (int i = 0; i < numEdges; i++) {
        int u, v;
        cin >> u >> v;
        graph[u][v] = graph[v][u] = 1;
    }

    bfs(startVertex, numVertices);

    return 0;
}




//Prolog
% Define the rules for determining eligibility
is_eligible(Person) :-
    is_18_or_older(Person),
    is_healthy(Person),
    has_no_preexisting_conditions(Person),
    has_no_recent_claims(Person).

% Define the rules for each eligibility factor
is_18_or_older(Person) :-
    person_age(Person, Age),
    Age >= 18.

is_healthy(Person) :-
    person_health_status(Person, HealthStatus),
    HealthStatus = good.

has_no_preexisting_conditions(Person) :-
    \+ person_has_preexisting_conditions(Person).

has_no_recent_claims(Person) :-
    \+ person_has_recent_claims(Person).

% Define the facts about each person
person_age(john, 25).
person_health_status(john, good).
person_has_preexisting_conditions(john, no).
person_has_recent_claims(john, no).

person_age(mary, 17).
person_health_status(mary, fair).
person_has_preexisting_conditions(mary, yes).
person_has_recent_claims(mary, yes).

% Prompt the user for input and output whether they are eligible
start :-
    write('Enter your name: '),
    read(Person),
    (is_eligible(Person) ->
        write('You are eligible for insurance coverage.');
    write('Sorry, you are not eligible for insurance coverage.')).
    
    
Minmax    
// A simple C++ program to find
// maximum score that
// maximizing player can get.
#include<bits/stdc++.h>
using namespace std;


int minimax(int depth, int nodeIndex, bool isMax,
			int scores[], int h)
{
	
	if (depth == h)
		return scores[nodeIndex];

	
	if (isMax)
	return max(minimax(depth+1, nodeIndex*2, true, scores, h),
			minimax(depth+1, nodeIndex*2 + 1, true, scores, h));

	// Else (If current move is Minimizer), find the minimum
	// attainable value
	else
		return min(minimax(depth+1, nodeIndex*2, true, scores, h),
			minimax(depth+1, nodeIndex*2 + 1, true, scores, h));
}

// A utility function to find Log n in base 2
int log2(int n)
{
return (n==1)? 0 : 1 + log2(n/2);
}

// Driver code
int main()
{
	// The number of elements in scores must be
	// a power of 2.
	int scores[] = {3, 5, 2, 9, 12, 5, 23, 23};
	int n = sizeof(scores)/sizeof(scores[0]);
	int h = log2(n);
	int res = minimax(0, 0, true, scores, h);
	cout << "The optimal value is : " << res << endl;
	return 0;
}


//DFS
#include<bits/stdc++.h>
using namespace std;

vector<int> graph[1000];  // adjacency list to store graph
bool visited[1000];       // boolean array to mark visited nodes

void dfs(int node) {
    visited[node] = true;
    cout << node << " ";

    for(int i = 0; i < graph[node].size(); i++) {
        int next = graph[node][i];
        if(!visited[next]) {
            dfs(next);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;   // n: number of nodes, m: number of edges

    for(int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;   // u and v are endpoints of the edge
        graph[u].push_back(v);   // add edge to the graph
        graph[v].push_back(u);   // add edge to the graph (for undirected graphs)
    }

    memset(visited, false, sizeof(visited));   // mark all nodes as unvisited

    for(int i = 1; i <= n; i++) {
        if(!visited[i]) {
            dfs(i);   // call dfs on unvisited nodes
        }
    }

    return 0;
}



//BFS PYTHON
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling



//DFS PYTHON
# Using a Python dictionary to act as an adjacency list
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '5')



//A*
from collections import deque

class Graph:
    # example of adjacency list (or rather map)
    # adjacency_list = {
    # 'A': [('B', 1), ('C', 3), ('D', 7)],
    # 'B': [('D', 5)],
    # 'C': [('D', 12)]
    # }

    def __init__(self, adjacency_list):
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        return self.adjacency_list[v]

    # heuristic function with equal values for all nodes
    def h(self, n):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1
        }

        return H[n]

    def a_star_algorithm(self, start_node, stop_node):
        # open_list is a list of nodes which have been visited, but who's neighbors
        # haven't all been inspected, starts off with the start node
        # closed_list is a list of nodes which have been visited
        # and who's neighbors have been inspected
        open_list = set([start_node])
        closed_list = set([])

        # g contains current distances from start_node to all other nodes
        # the default value (if it's not found in the map) is +infinity
        g = {}

        g[start_node] = 0

        # parents contains an adjacency map of all nodes
        parents = {}
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None

            # find a node with the lowest value of f() - evaluation function
            for v in open_list:
                if n == None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v;

            if n == None:
                print('Path does not exist!')
                return None

            # if the current node is the stop_node
            # then we begin reconstructin the path from it to the start_node
            if n == stop_node:
                reconst_path = []

                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]

                reconst_path.append(start_node)

                reconst_path.reverse()

                print('Path found: {}'.format(reconst_path))
                return reconst_path

            # for all neighbors of the current node do
            for (m, weight) in self.get_neighbors(n):
                # if the current node isn't in both open_list and closed_list
                # add it to open_list and note n as it's parent
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight

                # otherwise, check if it's quicker to first visit n, then m
                # and if it is, update parent data and g data
                # and if the node was in the closed_list, move it to open_list
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n

                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            # remove n from the open_list, and add it to closed_list
            # because all of his neighbors were inspected
            open_list.remove(n)
            closed_list.add(n)

        print('Path does not exist!')
        return None
        
        adjacency_list = {
    'A': [('B', 1), ('C', 3), ('D', 7)],
    'B': [('D', 5)],
    'C': [('D', 12)]
}
graph1 = Graph(adjacency_list)
graph1.a_star_algorithm('A', 'D')


//MINMAX JAVA
// A simple C++ program to find
// maximum score that
// maximizing player can get.
#include<bits/stdc++.h>
using namespace std;

// Returns the optimal value a maximizer can obtain.
// depth is current depth in game tree.
// nodeIndex is index of current node in scores[].
// isMax is true if current move is
// of maximizer, else false
// scores[] stores leaves of Game tree.
// h is maximum height of Game tree
int minimax(int depth, int nodeIndex, bool isMax,
			int scores[], int h)
{
	// Terminating condition. i.e
	// leaf node is reached
	if (depth == h)
		return scores[nodeIndex];

	// If current move is maximizer,
	// find the maximum attainable
	// value
	if (isMax)
	return max(minimax(depth+1, nodeIndex*2, false, scores, h),
			minimax(depth+1, nodeIndex*2 + 1, false, scores, h));

	// Else (If current move is Minimizer), find the minimum
	// attainable value
	else
		return min(minimax(depth+1, nodeIndex*2, true, scores, h),
			minimax(depth+1, nodeIndex*2 + 1, true, scores, h));
}

// A utility function to find Log n in base 2
int log2(int n)
{
return (n==1)? 0 : 1 + log2(n/2);
}

// Driver code
int main()
{
	// The number of elements in scores must be
	// a power of 2.
	int scores[] = {3, 5, 2, 9, 12, 5, 23, 23};
	int n = sizeof(scores)/sizeof(scores[0]);
	int h = log2(n);
	int res = minimax(0, 0, true, scores, h);
	cout << "The optimal value is : " << res << endl;
	return 0;
}



//ALPHA BETA JAVA
// C++ program to demonstrate
// working of Alpha-Beta Pruning
#include<bits/stdc++.h>
using namespace std;

// Initial values of
// Alpha and Beta
const int MAX = 1000;
const int MIN = -1000;

// Returns optimal value for
// current player(Initially called
// for root and maximizer)
int minimax(int depth, int nodeIndex,
			bool maximizingPlayer,
			int values[], int alpha,
			int beta)
{
	
	// Terminating condition. i.e
	// leaf node is reached
	if (depth == 3)
		return values[nodeIndex];

	if (maximizingPlayer)
	{
		int best = MIN;

		// Recur for left and
		// right children
		for (int i = 0; i < 2; i++)
		{
			
			int val = minimax(depth + 1, nodeIndex * 2 + i,
							false, values, alpha, beta);
			best = max(best, val);
			alpha = max(alpha, best);

			// Alpha Beta Pruning
			if (beta <= alpha)
				break;
		}
		return best;
	}
	else
	{
		int best = MAX;

		// Recur for left and
		// right children
		for (int i = 0; i < 2; i++)
		{
			int val = minimax(depth + 1, nodeIndex * 2 + i,
							true, values, alpha, beta);
			best = min(best, val);
			beta = min(beta, best);

			// Alpha Beta Pruning
			if (beta <= alpha)
				break;
		}
		return best;
	}
}

// Driver Code
int main()
{
	int values[8] = { 3, 5, 6, 9, 1, 2, 0, -1 };
	cout <<"The optimal value is : "<< minimax(0, 0, true, values, MIN, MAX);;
	return 0;
}

